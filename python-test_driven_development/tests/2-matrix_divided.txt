
This is the test to test my function: def matrix_divided(matrix, div)

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Test for divisor:

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], -3)
    [[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], -3.5)
    [[-0.29, -0.57, -0.86], [-1.14, -1.43, -1.71]]

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], "one")
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

    >>> matrix_divided([[3, 9], [12, 15]], 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

    >>> print(matrix_divided([[2, 4], [6, 8]], -0))
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero
    >>> print(matrix_divided([[2, 4], [6, 8]], -0.01))
    [[-200.0, -400.0], [-600.0, -800.0]]
    >>> print(matrix_divided([[2, 4], [6, 8]], None))
    Traceback (most recent call last):
    ...
    TypeError: div must be a number


Test for matrix:

    >>> matrix_divided([[1, 2, 3], [4, 5]], 3)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

    >>> matrix_divided([[1, 2, "3"], [4, 5, 6]], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[1, 2, -3], [4, 5, 6]], 2)
    [[0.5, 1.0, -1.5], [2.0, 2.5, 3.0]]

    >>> matrix_divided([[1, 2, 3], [4, 0.5, 6]], 2)
    [[0.5, 1.0, 1.5], [2.0, 0.25, 3.0]]

    >>> matrix_divided([[1, [], 3], [4, 5, 6]], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> print(matrix_divided([[2, 4], [6, 8], [10, 12]], 1))
    [[2.0, 4.0], [6.0, 8.0], [10.0, 12.0]]

    >>> print(matrix_divided([[1.3689, 2.890], [2, -9.338998]], 1))
    [[1.37, 2.89], [2.0, -9.34]]

